package melmac.app.ui;

import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;

import javax.swing.AbstractButton;
import javax.swing.SwingUtilities;
import lejos.pc.comm.NXTCommFactory;
import melmac.app.Program;
import melmac.app.comms.MockNxtCommunications;
import melmac.app.comms.NxtCommunications;
import melmac.core.comms.Communications;
import melmac.core.logging.LogMessage;
import melmac.core.logging.Logger;
import melmac.core.logging.Severity;
import melmac.core.interfaces.Controller;
import melmac.core.threading.BasicNotifier;
import melmac.core.interfaces.UiInfoProvider;
import melmac.core.strategies.Strategy;
import melmac.core.threading.Subscriber;
import melmac.core.world.UiInfo;

public final class HatTrickUi extends javax.swing.JPanel implements UiInfoProvider
{

    private final Object lock = new Object();
    private final Logger logger;
    private final Controller controller;
    private Program program;
    private String colour;
    private String attacking;
    private String pitch;
    private String game;
    private boolean started = false;
    private boolean areWeBlue;
    private boolean isTargetRight;
    private Strategy strategy;
    private StrategyHashMap stratMap;
    private UiInfo uiInfo;
    private Communications communications;
    private Set<Strategy> stratSet;
    private final BasicNotifier notificator = new BasicNotifier();

    public HatTrickUi(Logger logger, Controller controller, boolean defaultToYellow)
    {

        this.setEnabled(false);
        this.logger = logger;
        this.controller = controller;
        logger.log(true, Severity.Info, LogMessage.UIWindStrt);

        this.stratMap = new StrategyHashMap();
        stratMap.setStrategysAndKeys();

        Set<Object> stratKeysTemp = stratMap.keySet();
        TreeSet<Object> sortable = new TreeSet(stratKeysTemp);

        initComponents();

       // Iterator<Object> iterator = stratKeysTemp.iterator();
        Object[] names = new Object[100];
        int counter = 0;

        for (Object item : sortable)
        {
            //strategyComboBox.addItem(item);
            names[counter] = item;
            counter++;

        }
        strategyList.setListData(names);
        strategyList.setSelectedIndex(5); // TODO: magic number!
        this.yellowRadioButton.setSelected(defaultToYellow);
        this.blueRadioButton.setSelected(!defaultToYellow);
        this.leftRadioButton.setSelected(defaultToYellow);
        this.rightRadioButton.setSelected(!defaultToYellow);
        //strategyComboBox.setSelectedItem("DoNothing");
    }

    @Override
    public void resetStrategySelection()
    {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run()
            {
                strategyList.setSelectedIndex(1); // TODO: magic number!
                uiInfo = new UiInfo(false, areWeBlue, isTargetRight, null);
                notificator.notifySubscribers();
            }
        });
    }

    public void setProgram(Program program)
    {
        this.program = program;
        this.setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colourButtonGroup = new javax.swing.ButtonGroup();
        pitchButtonGroup = new javax.swing.ButtonGroup();
        attackingButtonGroup = new javax.swing.ButtonGroup();
        gameTypeButtonGroup = new javax.swing.ButtonGroup();
        mainFrame = new javax.swing.JTabbedPane();
        initialisePanel = new javax.swing.JPanel();
        blueRadioButton = new javax.swing.JRadioButton();
        yellowRadioButton = new javax.swing.JRadioButton();
        leftRadioButton = new javax.swing.JRadioButton();
        rightRadioButton = new javax.swing.JRadioButton();
        colourLabel = new javax.swing.JLabel();
        attackingLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        mainPitchRadioButton = new javax.swing.JRadioButton();
        sidePitchRadioButton = new javax.swing.JRadioButton();
        pitchLabel = new javax.swing.JLabel();
        gameTypeLabel = new javax.swing.JLabel();
        realRadioButton = new javax.swing.JRadioButton();
        simulatorRadioButton = new javax.swing.JRadioButton();
        hostNameTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        commInfoLabel = new javax.swing.JLabel();
        manualControlPanel = new javax.swing.JPanel();
        forwardButton = new javax.swing.JButton();
        LButton = new javax.swing.JButton();
        spinLButton = new javax.swing.JButton();
        spinRButton = new javax.swing.JButton();
        RButton = new javax.swing.JButton();
        reverseButton = new javax.swing.JButton();
        kickButton = new javax.swing.JButton();
        victoryDanceButton = new javax.swing.JButton();
        stopMoveButton = new javax.swing.JButton();
        angleTextField = new javax.swing.JTextField();
        powerTextField = new javax.swing.JTextField();
        moveActivateButton = new javax.swing.JButton();
        spinActivateButton = new javax.swing.JButton();
        inputAnglePowerLabel = new javax.swing.JLabel();
        curvedMovedActivateButton = new javax.swing.JButton();
        directionAngleTextField = new javax.swing.JTextField();
        xTextField = new javax.swing.JTextField();
        curvedMoveDescriptionLabel = new javax.swing.JLabel();
        yTextField = new javax.swing.JTextField();
        applyStrategyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        strategyList = new javax.swing.JList();
        worldInfoPanel = new javax.swing.JPanel();
        selfPositionLabel = new javax.swing.JLabel();
        selfXLabel = new javax.swing.JLabel();
        selfYLabel = new javax.swing.JLabel();
        opponentPositionLabel = new javax.swing.JLabel();
        opponentXLabel = new javax.swing.JLabel();
        opponentYLabel = new javax.swing.JLabel();
        ballPositionLabel = new javax.swing.JLabel();
        ballXLabel = new javax.swing.JLabel();
        ballYLabel = new javax.swing.JLabel();
        attackingBoundLabel = new javax.swing.JLabel();
        colourBoundLabel = new javax.swing.JLabel();
        currentStrategyLabel = new javax.swing.JLabel();
        consolePanel = new javax.swing.JPanel();
        consoleScrollPanel = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();

        mainFrame.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mainFrameKeyPressed(evt);
            }
        });

        initialisePanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                initialisePanelComponentShown(evt);
            }
        });

        colourButtonGroup.add(blueRadioButton);
        blueRadioButton.setSelected(true);
        blueRadioButton.setText("Blue");

        colourButtonGroup.add(yellowRadioButton);
        yellowRadioButton.setText("Yellow");

        attackingButtonGroup.add(leftRadioButton);
        leftRadioButton.setSelected(true);
        leftRadioButton.setText("Left");

        attackingButtonGroup.add(rightRadioButton);
        rightRadioButton.setText("Right");

        colourLabel.setText("Robot Colour");

        attackingLabel.setText("Attacking ");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        pitchButtonGroup.add(mainPitchRadioButton);
        mainPitchRadioButton.setSelected(true);
        mainPitchRadioButton.setText("Main Pitch");

        pitchButtonGroup.add(sidePitchRadioButton);
        sidePitchRadioButton.setText("Side Pitch");

        pitchLabel.setText("Pitch Setting");

        gameTypeLabel.setText("Game Type");

        gameTypeButtonGroup.add(realRadioButton);
        realRadioButton.setSelected(true);
        realRadioButton.setText("Real");

        gameTypeButtonGroup.add(simulatorRadioButton);
        simulatorRadioButton.setText("Simulator");

        hostNameTextField.setText("guarneri");

        portTextField.setText("20001");

        commInfoLabel.setText("Host Name and Port Number");

        javax.swing.GroupLayout initialisePanelLayout = new javax.swing.GroupLayout(initialisePanel);
        initialisePanel.setLayout(initialisePanelLayout);
        initialisePanelLayout.setHorizontalGroup(
            initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(initialisePanelLayout.createSequentialGroup()
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(initialisePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colourLabel)
                            .addComponent(blueRadioButton)
                            .addComponent(yellowRadioButton)
                            .addComponent(leftRadioButton)
                            .addComponent(attackingLabel)
                            .addComponent(rightRadioButton))
                        .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, initialisePanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mainPitchRadioButton)
                                    .addComponent(sidePitchRadioButton)
                                    .addComponent(simulatorRadioButton)
                                    .addGroup(initialisePanelLayout.createSequentialGroup()
                                        .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(realRadioButton)
                                            .addComponent(gameTypeLabel))
                                        .addGap(33, 33, 33)
                                        .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(commInfoLabel)
                                            .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(portTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(hostNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, initialisePanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(pitchLabel))))
                    .addGroup(initialisePanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(stopButton)
                        .addGap(189, 189, 189)))
                .addContainerGap(189, Short.MAX_VALUE))
        );
        initialisePanelLayout.setVerticalGroup(
            initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(initialisePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colourLabel)
                    .addComponent(pitchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blueRadioButton)
                    .addComponent(mainPitchRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yellowRadioButton)
                    .addComponent(sidePitchRadioButton))
                .addGap(18, 18, 18)
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attackingLabel)
                    .addComponent(gameTypeLabel)
                    .addComponent(commInfoLabel))
                .addGap(1, 1, 1)
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftRadioButton)
                    .addComponent(realRadioButton)
                    .addComponent(hostNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rightRadioButton)
                    .addComponent(simulatorRadioButton)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(initialisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        mainFrame.addTab("Initialise", initialisePanel);

        forwardButton.setText("F");
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        LButton.setText("L");
        LButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LButtonActionPerformed(evt);
            }
        });

        spinLButton.setText("S L");
        spinLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinLButtonActionPerformed(evt);
            }
        });

        spinRButton.setText("S R");
        spinRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinRButtonActionPerformed(evt);
            }
        });

        RButton.setText("R");
        RButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButtonActionPerformed(evt);
            }
        });

        reverseButton.setText("B");
        reverseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseButtonActionPerformed(evt);
            }
        });

        kickButton.setText("Kick");
        kickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kickButtonActionPerformed(evt);
            }
        });

        victoryDanceButton.setText("Victory Dance");
        victoryDanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                victoryDanceButtonActionPerformed(evt);
            }
        });

        stopMoveButton.setText("S");
        stopMoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopMoveButtonActionPerformed(evt);
            }
        });

        angleTextField.setText("20");

        powerTextField.setText("20");

        moveActivateButton.setText("Move");
        moveActivateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActivateButtonActionPerformed(evt);
            }
        });

        spinActivateButton.setText("Spin");
        spinActivateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinActivateButtonActionPerformed(evt);
            }
        });

        inputAnglePowerLabel.setText("Input for Spin Angle and Power");

        curvedMovedActivateButton.setText("Curved Move");
        curvedMovedActivateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curvedMovedActivateButtonActionPerformed(evt);
            }
        });

        directionAngleTextField.setText("20");

        xTextField.setText("20");

        curvedMoveDescriptionLabel.setText("Input for direction Angle and Distance");
        curvedMoveDescriptionLabel.setToolTipText("There are four fields. The top left sets the spin angle, and the top right sets the power. The bottom left sets the direction angle and the bottom right sets the distance. All four fields are set to 20 by default.");
        curvedMoveDescriptionLabel.setFocusable(false);

        yTextField.setText("20");

        applyStrategyButton.setText("Apply");
        applyStrategyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyStrategyButtonActionPerformed(evt);
            }
        });

        strategyList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(strategyList);

        javax.swing.GroupLayout manualControlPanelLayout = new javax.swing.GroupLayout(manualControlPanel);
        manualControlPanel.setLayout(manualControlPanelLayout);
        manualControlPanelLayout.setHorizontalGroup(
            manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualControlPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manualControlPanelLayout.createSequentialGroup()
                        .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manualControlPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(spinLButton)
                                    .addComponent(LButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stopMoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(forwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(reverseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spinRButton)
                                    .addComponent(RButton)))
                            .addComponent(kickButton, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manualControlPanelLayout.createSequentialGroup()
                                .addComponent(xTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(directionAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(curvedMovedActivateButton))
                            .addComponent(curvedMoveDescriptionLabel)
                            .addComponent(inputAnglePowerLabel)
                            .addGroup(manualControlPanelLayout.createSequentialGroup()
                                .addComponent(angleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(powerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinActivateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveActivateButton))
                            .addComponent(victoryDanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(186, 186, 186))
                    .addGroup(manualControlPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyStrategyButton)
                        .addContainerGap())))
        );
        manualControlPanelLayout.setVerticalGroup(
            manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualControlPanelLayout.createSequentialGroup()
                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manualControlPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manualControlPanelLayout.createSequentialGroup()
                                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(forwardButton)
                                    .addComponent(spinRButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(stopMoveButton)
                                    .addComponent(RButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(reverseButton))
                            .addGroup(manualControlPanelLayout.createSequentialGroup()
                                .addComponent(inputAnglePowerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(angleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(powerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinActivateButton)
                                    .addComponent(moveActivateButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(curvedMoveDescriptionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(xTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(curvedMovedActivateButton)
                                    .addComponent(directionAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(manualControlPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(spinLButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LButton)))
                .addGap(13, 13, 13)
                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kickButton)
                    .addComponent(victoryDanceButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(manualControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(applyStrategyButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        mainFrame.addTab("Manual Control", manualControlPanel);

        selfPositionLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        selfPositionLabel.setText("Our Position");

        selfXLabel.setText("ourX");

        selfYLabel.setText("ourY");

        opponentPositionLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        opponentPositionLabel.setText("Opponent Position");

        opponentXLabel.setText("opX");

        opponentYLabel.setText("opY");

        ballPositionLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        ballPositionLabel.setText("Ball Position");

        ballXLabel.setText("ballX");

        ballYLabel.setText("ballY");

        attackingBoundLabel.setText("attacking");

        colourBoundLabel.setText("colour");

        currentStrategyLabel.setText("currentStrategy");

        javax.swing.GroupLayout worldInfoPanelLayout = new javax.swing.GroupLayout(worldInfoPanel);
        worldInfoPanel.setLayout(worldInfoPanelLayout);
        worldInfoPanelLayout.setHorizontalGroup(
            worldInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(worldInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(worldInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selfPositionLabel)
                    .addGroup(worldInfoPanelLayout.createSequentialGroup()
                        .addComponent(selfXLabel)
                        .addGap(18, 18, 18)
                        .addComponent(selfYLabel)
                        .addGap(18, 18, 18)
                        .addComponent(attackingBoundLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(colourBoundLabel))
                    .addGroup(worldInfoPanelLayout.createSequentialGroup()
                        .addComponent(opponentXLabel)
                        .addGap(18, 18, 18)
                        .addComponent(opponentYLabel))
                    .addComponent(opponentPositionLabel)
                    .addComponent(ballPositionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(worldInfoPanelLayout.createSequentialGroup()
                        .addComponent(ballXLabel)
                        .addGap(18, 18, 18)
                        .addComponent(ballYLabel))
                    .addComponent(currentStrategyLabel))
                .addContainerGap(345, Short.MAX_VALUE))
        );
        worldInfoPanelLayout.setVerticalGroup(
            worldInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(worldInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selfPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(worldInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selfYLabel)
                    .addComponent(selfXLabel)
                    .addComponent(attackingBoundLabel)
                    .addComponent(colourBoundLabel))
                .addGap(1, 1, 1)
                .addComponent(currentStrategyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opponentPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(worldInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opponentYLabel)
                    .addComponent(opponentXLabel))
                .addGap(18, 18, 18)
                .addComponent(ballPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(worldInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ballXLabel)
                    .addComponent(ballYLabel))
                .addContainerGap(157, Short.MAX_VALUE))
        );

        mainFrame.addTab("World Info", worldInfoPanel);

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        consoleScrollPanel.setViewportView(consoleTextArea);

        javax.swing.GroupLayout consolePanelLayout = new javax.swing.GroupLayout(consolePanel);
        consolePanel.setLayout(consolePanelLayout);
        consolePanelLayout.setHorizontalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consolePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(consoleScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );
        consolePanelLayout.setVerticalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consolePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(consoleScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainFrame.addTab("Console", consolePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(mainFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mainFrameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mainFrameKeyPressed

        char keyPressed = evt.getKeyChar();
        switch (keyPressed)
        {
            case ('w'):
            {
                moveWrapper(0);
                break;
            }
            case ('a'):
            {
                moveWrapper(270);
                break;
            }
            case ('s'):
            {
                moveWrapper(180);
                break;
            }
            case ('d'):
            {
                moveWrapper(90);
                break;
            }
            case ('q'):
            {
                spinWrapper(true);
                break;
            }
            case ('e'):
            {
                spinWrapper(false);
                break;
            }
            case (' '):
            {
                kickWrapper();
                break;
            }
            case ('p'):
            {
                stopWrapper();
                break;
            }
            default:
                logger.log(true, Severity.Warning, LogMessage.UIIlglActn);
        }
}//GEN-LAST:event_mainFrameKeyPressed

    private void applyStrategyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyStrategyButtonActionPerformed

        //String selectedAction = (String) strategyComboBox.getSelectedItem();
        //strategy = (Strategy) stratMap.get(selectedAction);
        uiInfo = new UiInfo(false, areWeBlue, isTargetRight, getHashSetFromList());
        notificator.notifySubscribers();
}//GEN-LAST:event_applyStrategyButtonActionPerformed

    private void curvedMovedActivateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvedMovedActivateButtonActionPerformed
        try
        {
            logger.log(true, Severity.Info, LogMessage.UIManInput);

            // String strAngle = angleTextField.getText();
            String strPower = powerTextField.getText();
            String strSpinAngle = angleTextField.getText();
            String strDirectionAngle = directionAngleTextField.getText();
            String strX = xTextField.getText();
            String strY = yTextField.getText();

            //int angle = 0;
            int power = 20;
            int spinAngle = 20;
            int directionAngle = 20;
            int Xdistance = 20;
            int Ydistance = 20;
            try
            {
                spinAngle = Integer.valueOf(strSpinAngle);
                power = Integer.valueOf(strPower);
                directionAngle = Integer.valueOf(strDirectionAngle);
                Xdistance = Integer.valueOf(strX);
                Ydistance = Integer.valueOf(strY);
            }
            catch (Exception innerException)
            {
                logger.log(true, Severity.Warning, LogMessage.UIIlglActn);
            }

            controller.curvedMove(directionAngle, Xdistance, Ydistance, spinAngle, power);
            //nxtCommunications.sendSync(MessageType.JavaToNxt_Move, new int[] {angle, power}, 2);

        }
        catch (Exception outerException)
        {
            logger.log(true, Severity.Severe, LogMessage.ECmdSndFai);
        }
}//GEN-LAST:event_curvedMovedActivateButtonActionPerformed

    private void spinActivateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinActivateButtonActionPerformed
        spinWrapper(false);
}//GEN-LAST:event_spinActivateButtonActionPerformed

    private void moveActivateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActivateButtonActionPerformed
        String strAngle = angleTextField.getText();
        try
        {
            int angle = Integer.valueOf(strAngle);
            moveWrapper(angle);

        }
        catch (Exception innerException)
        {
            logger.log(true, Severity.Warning, LogMessage.UIIlglActn);
        }
}//GEN-LAST:event_moveActivateButtonActionPerformed

    private void stopMoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopMoveButtonActionPerformed
        stopWrapper();
}//GEN-LAST:event_stopMoveButtonActionPerformed

    private void victoryDanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_victoryDanceButtonActionPerformed
        // TODO add victory dance class
        // VictoryDance.dance();
}//GEN-LAST:event_victoryDanceButtonActionPerformed

    private void kickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kickButtonActionPerformed
        kickWrapper();
}//GEN-LAST:event_kickButtonActionPerformed

    private void reverseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseButtonActionPerformed
        moveWrapper(180);
}//GEN-LAST:event_reverseButtonActionPerformed

    private void RButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButtonActionPerformed
        moveWrapper(90);
}//GEN-LAST:event_RButtonActionPerformed

    private void spinRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinRButtonActionPerformed
        spinWrapper(false);
}//GEN-LAST:event_spinRButtonActionPerformed

    private void spinLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinLButtonActionPerformed
        spinWrapper(true);
}//GEN-LAST:event_spinLButtonActionPerformed

    private void LButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LButtonActionPerformed
        moveWrapper(270);
}//GEN-LAST:event_LButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        moveWrapper(0);
}//GEN-LAST:event_forwardButtonActionPerformed

    private void initialisePanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_initialisePanelComponentShown
        // TODO add your handling code here:
}//GEN-LAST:event_initialisePanelComponentShown

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed

        if (started == true)
        {
            started = false;
            logger.log(true, Severity.Info, LogMessage.UIStopPrss);
            try
            {
                program.stop();
            }
            catch (Exception ex)
            {
                java.util.logging.Logger.getLogger(HatTrickUi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO Add Start and Stop Logic
        if (started == false)
        {
            started = true;
            logger.log(true, Severity.Info, LogMessage.UIStrtPrss);

            Enumeration<AbstractButton> colours = colourButtonGroup.getElements();
            Enumeration<AbstractButton> pitches = pitchButtonGroup.getElements();
            Enumeration<AbstractButton> sides = attackingButtonGroup.getElements();
            Enumeration<AbstractButton> gameTypes = gameTypeButtonGroup.getElements();

            for (int i = 0; i < 2; i++)
            {
                AbstractButton tmpColourButton = colours.nextElement();
                AbstractButton tmpPitchButton = pitches.nextElement();
                AbstractButton tmpSideButton = sides.nextElement();
                AbstractButton tmpGameButton = gameTypes.nextElement();

                if (tmpColourButton.isSelected())
                {
                    colour = tmpColourButton.getText();
                }

                if (tmpPitchButton.isSelected())
                {
                    pitch = tmpPitchButton.getText();
                }

                if (tmpSideButton.isSelected())
                {
                    attacking = tmpSideButton.getText();
                }

                if (tmpGameButton.isSelected())
                {
                    game = tmpGameButton.getText();
                }
            }

            if (colour.equalsIgnoreCase("blue"))
            {
                areWeBlue = true;
            }
            else
            {
                areWeBlue = false;
            }

            if (attacking.equalsIgnoreCase("right"))
            {
                isTargetRight = true;
            }
            else
            {
                isTargetRight = false;
            }
            if (game.equalsIgnoreCase("real"))
            {
                communications = new NxtCommunications(logger, NXTCommFactory.BLUETOOTH, "NXT-G2", "00165308DFAB");
            } else
            {
                //default connections
                String host = "guarneri";
                int port = 20001;
                try {
                    host = hostNameTextField.getText();
                    String portStr = portTextField.getText();
                    port =  new Integer(portStr);

                }
                catch (Exception e)
                {
                    logger.log(true, Severity.Severe, LogMessage.UIIlglActn);
                }
                communications = new MockNxtCommunications(logger, host, port);
            }

            //String selectedAction = (String) strategyComboBox.getSelectedItem();
            //strategy = (Strategy) stratMap.get(selectedAction);

            stratSet = getHashSetFromList();
            uiInfo = new UiInfo(false, areWeBlue, isTargetRight, stratSet);
            try
            {
                program.start();
            }
            catch (Exception ex)
            {
                java.util.logging.Logger.getLogger(HatTrickUi.class.getName()).log(Level.SEVERE, null, ex);
            }
            notificator.notifySubscribers();

        }
}//GEN-LAST:event_startButtonActionPerformed

    public void moveWrapper(int angle)
    {
        try
        {
            // String strAngle = angleTextField.getText();
            String strPower = powerTextField.getText();

            //int angle = 0;
            int power = 0;

            try
            {
                //angle = Integer.valueOf(strAngle);
                power = Integer.valueOf(strPower);

            }
            catch (Exception innerException)
            {
                logger.log(true, Severity.Warning, LogMessage.UIIlglActn);
            }

            controller.move(angle, power);
            //nxtCommunications.sendSync(MessageType.JavaToNxt_Move, new int[] {angle, power}, 2);

        }
        catch (Exception outerException)
        {
            logger.log(true, Severity.Severe, LogMessage.ECmdSndFai);
        }

    }

    public void kickWrapper()
    {
        controller.kick();
        //nxtCommunications.sendSync(MessageType.JavaToNxt_Kick);
    }

    public void spinWrapper(boolean LR)
    {
        //LR true = from Spin Left
        //LR false = from Spin Right

        try
        {
            String strAngle = angleTextField.getText();
            String strPower = powerTextField.getText();

            int angle = 0;
            int power = 0;

            try
            {
                angle = Integer.valueOf(strAngle);
                power = Integer.valueOf(strPower);

                if (LR)
                {
                    angle = 0 - angle;
                }

            }
            catch (Exception innerException)
            {
                logger.log(true, Severity.Warning, LogMessage.UIIlglActn);
            }
            //use Controller
            controller.spin(angle, power);
            //nxtCommunications.sendSync(MessageType.JavaToNxt_Move, new int[] {0, power}, 2);

        }
        catch (Exception outerException)
        {
            logger.log(true, Severity.Severe, LogMessage.ECmdSndFai);
        }

    }

    public void stopWrapper()
    {
        try
        {
            //logger.log(Severity.Info, LogMessage.UIManInput);
            controller.stop();
            //nxtCommunications.sendSync(MessageType.JavaToNxt_Stop);

        }
        catch (Exception outerException)
        {
            logger.log(true, Severity.Severe, LogMessage.ECmdSndFai);
        }

    }

    @Override
    public void addSubscriber(Subscriber subscriber)
    {
        notificator.addSubscriber(subscriber);
    }

    @Override
    public void removeSubscriber(Subscriber subscriber)
    {
        notificator.removeSubscriber(subscriber);
    }

    @Override
    public UiInfo getUiInfo()
    {
        return uiInfo;
    }

    public Communications getCommunications()
    {
        return communications;
    }

    public Set<Strategy> getHashSetFromList()
    {
        Object[] tempStrats = strategyList.getSelectedValues();
        Set<Strategy> strats = new HashSet<Strategy>();

        for (Object o : tempStrats)
        {
            if (((String) o).equalsIgnoreCase("AutoSelect"))
            {
                return null;
            }

            strats.add((Strategy) stratMap.get(o));
        }

        return strats;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LButton;
    private javax.swing.JButton RButton;
    private javax.swing.JTextField angleTextField;
    private javax.swing.JButton applyStrategyButton;
    private javax.swing.JLabel attackingBoundLabel;
    private javax.swing.ButtonGroup attackingButtonGroup;
    private javax.swing.JLabel attackingLabel;
    private javax.swing.JLabel ballPositionLabel;
    private javax.swing.JLabel ballXLabel;
    private javax.swing.JLabel ballYLabel;
    private javax.swing.JRadioButton blueRadioButton;
    private javax.swing.JLabel colourBoundLabel;
    private javax.swing.ButtonGroup colourButtonGroup;
    private javax.swing.JLabel colourLabel;
    private javax.swing.JLabel commInfoLabel;
    private javax.swing.JPanel consolePanel;
    private javax.swing.JScrollPane consoleScrollPanel;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JLabel currentStrategyLabel;
    private javax.swing.JLabel curvedMoveDescriptionLabel;
    private javax.swing.JButton curvedMovedActivateButton;
    private javax.swing.JTextField directionAngleTextField;
    private javax.swing.JButton forwardButton;
    private javax.swing.ButtonGroup gameTypeButtonGroup;
    private javax.swing.JLabel gameTypeLabel;
    private javax.swing.JTextField hostNameTextField;
    private javax.swing.JPanel initialisePanel;
    private javax.swing.JLabel inputAnglePowerLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kickButton;
    private javax.swing.JRadioButton leftRadioButton;
    private javax.swing.JTabbedPane mainFrame;
    private javax.swing.JRadioButton mainPitchRadioButton;
    private javax.swing.JPanel manualControlPanel;
    private javax.swing.JButton moveActivateButton;
    private javax.swing.JLabel opponentPositionLabel;
    private javax.swing.JLabel opponentXLabel;
    private javax.swing.JLabel opponentYLabel;
    private javax.swing.ButtonGroup pitchButtonGroup;
    private javax.swing.JLabel pitchLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JTextField powerTextField;
    private javax.swing.JRadioButton realRadioButton;
    private javax.swing.JButton reverseButton;
    private javax.swing.JRadioButton rightRadioButton;
    private javax.swing.JLabel selfPositionLabel;
    private javax.swing.JLabel selfXLabel;
    private javax.swing.JLabel selfYLabel;
    private javax.swing.JRadioButton sidePitchRadioButton;
    private javax.swing.JRadioButton simulatorRadioButton;
    private javax.swing.JButton spinActivateButton;
    private javax.swing.JButton spinLButton;
    private javax.swing.JButton spinRButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton stopMoveButton;
    private javax.swing.JList strategyList;
    private javax.swing.JButton victoryDanceButton;
    private javax.swing.JPanel worldInfoPanel;
    private javax.swing.JTextField xTextField;
    private javax.swing.JTextField yTextField;
    private javax.swing.JRadioButton yellowRadioButton;
    // End of variables declaration//GEN-END:variables
}
